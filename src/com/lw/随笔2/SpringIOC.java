package com.lw.随笔2;

public class SpringIOC {

    private static String[] springOne
    ={"IoC（Inversion of Control）是指容器控制程序对象之间的关系，而不是传统实现中，由程序代码直接操控。",
            "控制权由应用代码中转到了外部容器，控制权的转移是所谓反转。",
            "对于Spring而言，就是由Spring来控制对象的生命周期和对象之间的关系；",
            "；IoC还有另外一个名字——“依赖注入（Dependency Injection）”。",
            "从名字上理解，所谓依赖注入，即组件之间的依赖关系由容器在运行期决定，即由容器动态地将某种依赖关系注入到组件之中.",
            "在Spring的工作方式中，所有的类都会在spring容器中登记，告诉spring这是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，" +
                    "把你要的东西主动给你，同时也把你交给其他需要你的东西。",
            "所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。",
            "对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。",
            "在系统运行中，动态的向某个对象提供它所需要的其他对象。  ",
            "依赖注入的思想是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。",
            "总而言之，在传统的对象创建方式中，通常由调用者来创建被调用者的实例，而在Spring中创建被调用者的工作由Spring来完成，" +
                    "然后注入调用者，即所谓的依赖注入or控制反转。",
            "注入方式有两种：依赖注入和设置注入； IoC的优点：降低了组件之间的耦合，降低了业务对象之间替换的复杂性，使之能够灵活的管理对象。",
    };
    public static void main(String[] args) {
        for (int i = 0; i < springOne.length; i++){
            System.out.println(springOne[i]);
        }
    }
}
